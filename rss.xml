<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Jack&apos;s Leadership Blog</title><description>Leadership is, at root, about Influencing Others</description><link>https://leadership.qubitpi.org/</link><language>en</language><item><title>Draft Example</title><link>https://leadership.qubitpi.org/posts/draft/</link><guid isPermaLink="true">https://leadership.qubitpi.org/posts/draft/</guid><pubDate>Fri, 01 Jul 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;This Article is a Draft&lt;/h1&gt;
&lt;p&gt;This article is currently in a draft state and is not published. Therefore, it will not be visible to the general audience. The content is still a work in progress and may require further editing and review.&lt;/p&gt;
&lt;p&gt;When the article is ready for publication, you can update the &quot;draft&quot; field to &quot;false&quot; in the Frontmatter:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: Draft Example
published: 2024-01-11T04:40:26.381Z
tags: [Markdown, Blogging, Demo]
category: Examples
draft: false
---
&lt;/code&gt;&lt;/pre&gt;
</content:encoded></item><item><title>Simple Guides for Fuwari</title><link>https://leadership.qubitpi.org/posts/guide/</link><guid isPermaLink="true">https://leadership.qubitpi.org/posts/guide/</guid><description>How to use this blog template.</description><pubDate>Mon, 01 Apr 2024 00:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;Cover image source: &lt;a href=&quot;https://image.civitai.com/xG1nkqKTMzGDvpLrqFT7WA/208fc754-890d-4adb-9753-2c963332675d/width=2048/01651-1456859105-(colour_1.5),girl,_Blue,yellow,green,cyan,purple,red,pink,_best,8k,UHD,masterpiece,male%20focus,%201boy,gloves,%20ponytail,%20long%20hair,.jpeg&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This blog template is built with &lt;a href=&quot;https://astro.build/&quot;&gt;Astro&lt;/a&gt;. For the things that are not mentioned in this guide, you may find the answers in the &lt;a href=&quot;https://docs.astro.build/&quot;&gt;Astro Docs&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Front-matter of Posts&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;---
title: My First Blog Post
published: 2023-09-09
description: This is the first post of my new Astro blog.
image: ./cover.jpg
tags: [Foo, Bar]
category: Front-end
draft: false
---
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Attribute&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;title&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The title of the post.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;published&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The date the post was published.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;description&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A short description of the post. Displayed on index page.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;image&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The cover image path of the post.&amp;lt;br/&amp;gt;1. Start with &lt;code&gt;http://&lt;/code&gt; or &lt;code&gt;https://&lt;/code&gt;: Use web image&amp;lt;br/&amp;gt;2. Start with &lt;code&gt;/&lt;/code&gt;: For image in &lt;code&gt;public&lt;/code&gt; dir&amp;lt;br/&amp;gt;3. With none of the prefixes: Relative to the markdown file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tags&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The tags of the post.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;category&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The category of the post.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;draft&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;If this post is still a draft, which won&apos;t be displayed.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Where to Place the Post Files&lt;/h2&gt;
&lt;p&gt;Your post files should be placed in &lt;code&gt;src/content/posts/&lt;/code&gt; directory. You can also create sub-directories to better organize your posts and assets.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;src/content/posts/
├── post-1.md
└── post-2/
    ├── cover.png
    └── index.md
&lt;/code&gt;&lt;/pre&gt;
</content:encoded></item><item><title>History of Management</title><link>https://leadership.qubitpi.org/posts/history-of-management/</link><guid isPermaLink="true">https://leadership.qubitpi.org/posts/history-of-management/</guid><description>History of Management</description><pubDate>Sun, 21 Jul 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;My background of Physics told me to truly master a concept, one cannot ignore its origin. If I teach you Maxwell
equations now you would end up with a blank mind. You need to start with &quot;what is an electric charge&quot;, &quot;what is a
field&quot;, and &quot;how a moving charge could produce magnetic field&quot; so on and so forth. At the end of the day, you will be
making a perfect sense of what Maxell equations mean. It it only through this way you can start applying Maxwell&apos;s
equations and solve real-worl problems.&lt;/p&gt;
&lt;p&gt;Management, and everything else in our live, goes like this.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Management#History&quot;&gt;Wikipedia&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The field of management originated in ancient China, including possibly the first highly centralized bureaucratic state,
and the earliest (by the second century BC) example of an administration based on merit through testing. Some theorists
have cited ancient military texts as providing lessons for civilian managers. For example, Chinese general Sun Tzu in
his 6th-century BC work The Art of War recommends[citation needed] (when re-phrased in modern terminology) being aware
of and acting on strengths and weaknesses of both a manager&apos;s organization and a foe&apos;s.&lt;/p&gt;
&lt;p&gt;:::note[《孙子兵法，孙膑兵法》下载]
&lt;a href=&quot;https://zhuanlan.zhihu.com/p/386890361&quot;&gt;中华经典藏书.中华书局·电子书· PDF合集&lt;/a&gt;
:::&lt;/p&gt;
&lt;p&gt;The writings of influential Chinese Legalist philosopher Shen Buhai (申子) may be considered to embody a rare premodern example
of abstract theory of administration.&lt;/p&gt;
&lt;p&gt;:::note[Key Takeaway]
&lt;a href=&quot;https://forum.freemdict.com/t/topic/24650/3&quot;&gt;多读一读诸子百家的书籍&lt;/a&gt;，发掘里面的管理学经验
:::&lt;/p&gt;
&lt;p&gt;Various ancient and medieval civilizations produced
&quot;&lt;a href=&quot;https://en.wikipedia.org/wiki/Mirrors_for_princes&quot;&gt;mirrors for princes&lt;/a&gt;&quot; books, which aimed to advise new monarchs on
how to govern. Examples includes &lt;em&gt;The Prince&lt;/em&gt; by Italian author Niccolò Machiavelli&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;https://www.reddit.com/r/AskHistorians/comments/3jk7uk/is_there_any_management_theory_literature_that_we/&quot;&gt;Reddit&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;in the &lt;a href=&quot;https://trello.com/c/cKS8d0bp&quot;&gt;De Administrando Imperio&lt;/a&gt; of Constantine Porphyrogenitus. Constantine had this
written/compiled as advice to his son, Romanus. It functions as a practical manual, with a heavy foreign policy
emphasis, on how to be a good emperor. Unlike some advice written by emperors and historians, this one is not a
panegyric or solely praise; rather, it is candid and informative policy. Furthermore, it is (mostly) secular and
research-based; though, the bit on the &quot;obscene&quot; and &quot;blasphemous&quot; Mohammed is obviously biased.&lt;/p&gt;
&lt;p&gt;R.J.H. Jenkins, in his introduction to the De Administrando Imperio, describes Constantine’s attempt at teaching
&quot;practical wisdom&quot; to his son by:&lt;/p&gt;
&lt;p&gt;:::important[Scrutiny of the historical documents]
writing or causing to be written histories of recent events and manuals of technical instruction on the various
departments of business and administration… Documents from the files of every branch of the administration, from the
foreign ministry, the treasury, the offices of ceremonial, were scrutinized and abstracted.
:::&lt;/p&gt;
&lt;p&gt;One of its key elements was a &quot;summary of the recent internal history, politics, and organization within the borders of
the empire.&quot; Far from being a piece of rhetoric or self-absorbed thought, the document contains enormous, albeit
intermittently erroneous, research and careful analysis. This is “no partial document of propaganda… to impress domestic
or foreign circles.&quot;&lt;/p&gt;
&lt;p&gt;From Jenkins,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Provincial governors and imperial envoys wrote historical and topographical reports on the areas of their jurisdiction
or assignment. Foreign ambassadors were diligently questioned as to the affairs of their respective countries.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;One of the interesting things to note about the Administrando was its secret nature, having been written as advice for
Constantine&apos;s son, Romanus; it acts as part succession letter, part compilation, and part &quot;confidential&quot;
advice/information.&lt;/p&gt;
&lt;p&gt;As the emperor puts it,&lt;/p&gt;
&lt;p&gt;:::tip[On &quot;Knowing the difference between being-managed&quot;]
it is not for those who wish to govern lawfully to copy and emulate what has been ill done by some out of ignorance or
arrogance, but rather to have the glorious deeds of those who have ruled lawfully and righteously as noble pictures set
up for an example to be copied, and after their pattern to strive himself also to direct all that he does... it may
greatly advantage you… [to know] the difference between other nations, their origins and customs and manner of life, and
the position and climate of the land they dwell in...
:::&lt;/p&gt;
</content:encoded></item><item><title>Managing Tech Assets - Is a Common Library a Good Idea? No</title><link>https://leadership.qubitpi.org/posts/managing-tech-assets-common-lib-or-not/</link><guid isPermaLink="true">https://leadership.qubitpi.org/posts/managing-tech-assets-common-lib-or-not/</guid><description>Managing Tech Assets - Is a Common Library a Good Idea? No</description><pubDate>Wed, 17 Jul 2024 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;A Story - A Person Created a Common Library and Then...&lt;/h2&gt;
&lt;p&gt;&quot;Embarrassingly I introduced a &quot;common&quot; library, named as such, in a team environment a couple of decades back.
I didn&apos;t really understand the dynamics back then of what could happen in a loosely-coordinated team setting in just a
matter of months.&lt;/p&gt;
&lt;p&gt;When I introduced it I thought I made it clear and also documented that it&apos;s for things we&apos;d all agree we find useful on
a daily basis, that it&apos;s intended to be a minimalist library, and that the library should depend on nothing else besides
the standard library so that it&apos;s as easy to deploy as possible in new projects. My thinking at the time was that it was
our own little extension to the standard library for things that, in our particular domain, we found useful on a daily
basis.&lt;/p&gt;
&lt;p&gt;And it started off well enough. We started off with a math library (&lt;code&gt;common/math*&lt;/code&gt;) of routines which we all used on a
daily basis, since we were working on computer graphics which was often heavy on the linear algebra. And since we were
often interoping with C code, we agreed on some useful utility functions like find_index which, unlike std::find in C++,
would return an index to an element found in a sequence instead of an iterator which mimicked how our C functions worked
-- things of this sort -- a little bit eclectic but minimalist and widely used enough to remain familiar and practical
to everyone, and instant familiarity is an extremely important criteria as I see it in trying to make anything that is
&quot;common&quot; or &quot;standard&quot; since if it truly is &quot;common&quot;, it should have that familiar quality about it as a result of its
wide adoption and daily usage.&lt;/p&gt;
&lt;p&gt;But over time the design intentions of the library slipped out of my fingers as people started to add things they used
personally that they merely thought might be of use to someone else, only to find no one else using it. And later
someone started adding functions that depended on OpenGL for common GL-related routines. Further on we adopted Qt and
people started adding code that depended on Qt, so already the common library was dependent on two external libraries.
At some point someone added common shader routines which was dependent on our application-specific shader library, and
at that point you couldn&apos;t even deploy it in a new project without bringing in Qt, OGL, and our application-specific
shader library and writing a non-trivial build script for your project. So it turned into this eclectic, interdependent
mess. Later on people even added GUI-dependent code to it.&lt;/p&gt;
&lt;p&gt;But I&apos;ve also found by debating what should and shouldn&apos;t go into this library that what is considered &quot;common&quot; can
easily turn into a very subjective idea if you don&apos;t set a very hard line rule that what&apos;s &quot;common&quot; is what everyone
tends to find useful on a daily basis. Any loosening of the standards and it quickly degrades from things everyone finds
useful on a daily basis to something a single developer finds useful that might have the possibility of being beneficial
to someone else, and at that point the library degrades into an eclectic mess really fast.&lt;/p&gt;
&lt;p&gt;But furthermore when you reach that point, some developers can start adding things for the simple reason that they don&apos;t
like the programming language. They might not like the syntax of a for loop or a function call, at which point the
library is starting to get filled with things that&apos;s just fighting the fundamental syntax of the language, replacing a
couple of lines of straightforward code which isn&apos;t really duplicating any logic down to a single terse line of exotic
code only familiar to the developer who introduced such a shorthand. Then such a developer might start adding more
functionality to the common library implemented using such shorthands, at which point significant sections of the common
library become interwoven with these exotic shorthands which might seem beautiful and intuitive to the developer who
introduced it but ugly and foreign and hard to understand for everyone else. And at that point I think you know that any
hope of making something truly &quot;common&quot; is lost, since &quot;common&quot; and &quot;unfamiliar&quot; are polar opposite ideas.&lt;/p&gt;
&lt;p&gt;So there&apos;s all kinds of cans of worms there, at least in a loosely-coordinated team environment, with a library with
ambitions as broad and as generalized as just &quot;commonly-used stuff&quot;. And while the underlying problem might have been
the loose coordination above all else, at least multiple libraries intended to serve a more singular purpose, like a
library intended to provide math routines and nothing else, probably wouldn&apos;t degrade as significantly in terms of its
design purity and dependencies as a &quot;common&quot; library. So in retrospect I think it would be much better to err on the
side of libraries which have much more clear design intentions. I&apos;ve also found over the years that narrow in purpose
and narrow in applicability are radically different ideas. Often the most widely applicable things are the narrowest and
most singular in purpose, since you can then say, &quot;aha, this is exactly what I need&quot;, as opposed to wading through an
eclectic library of disparate functionality trying to see if it has something you need.&lt;/p&gt;
&lt;p&gt;Also I&apos;m admittedly at least a little bit impractical and care maybe a bit too much about aesthetics, but the way I tend
to perceive my idea of a library&apos;s quality (and maybe even &quot;beauty&quot;) is judged more by its weakest link than its
strongest, in a similar way that if you presented me the most appetitizing food in the world but, on the same plate, put
something rotting on there that smells really bad, I tend to want to reject the entire plate. And if you&apos;re like me in
that regard and make something that invites all sorts of additions as something called &quot;common&quot;, you might find yourself
looking at that analogical plate with something rotting on the side. So likewise I think it&apos;s good if a library is
organized and named and documented in a way such that it doesn&apos;t invite more and more and more additions over time. And
that can even apply to your personal creations, since I&apos;ve certainly created some rotten stuff here and there, and it
&quot;taints&quot; a lot less if it&apos;s not being added to the biggest plate. Separating things out into small, very singular
libraries has a tendency to better decouple code as well, if only by the sheer virtue that it becomes far less
convenient to start coupling everything.&lt;/p&gt;
&lt;p&gt;:::tip
Code deduplication has been hammered into me over the years but I feel like I should try it this time around.
:::&lt;/p&gt;
&lt;p&gt;What I might suggest in your case is to start to take it easy on code deduplication. I&apos;m not saying to copy and paste
big snippets of poorly-tested, error-prone code around or anything of this sort, or duplicating huge amounts of
non-trivial code that has a decent probability of requiring changes in the future.&lt;/p&gt;
&lt;p&gt;But especially if you are of the mindset to create a &quot;common&quot; library, for which I assume your desire is to create
something widely-applicable, highly reusable, and perhaps ideally something you find just as useful today as you do a
decade from now, then sometimes you might even need or want some duplication to achieve this elusive quality. Because
the duplication might actually serve as a decoupling mechanism. It&apos;s like if you want to separate a video player from an
MP3 player, then you at least have to duplicate some things like batteries and hard drives. They can&apos;t share these
things or else they&apos;re indivisibly coupled and cannot be used independently of each other, and at that point people
might not be interested in the device anymore if all they want to do is play MP3s. But some time after you split these
two devices apart, you might find that the MP3 player can benefit from a different battery design or smaller hard drive
than the video player, at which point you&apos;re no longer duplicating anything; what initially started out as duplication
to allow this interdependent device to split into two separate, independent devices might later turn out to yield
designs and implementations that are no longer redundant at all.&lt;/p&gt;
&lt;p&gt;It&apos;s worth considering things from the perspective of the one using a library. Would you actually want to use a library
that minimizes code duplication? Chances are that you won&apos;t because one that does will naturally depend on other
libraries. And those other libraries might depend on other libraries to avoid duplicating their code, and so on, until
you might need to import/link 50 different libraries to just to get some basic functionality like loading and playing an
audio file, and that becomes very unwieldy. Meanwhile if such an audio library deliberately chose to duplicate some
things here and there to achieve its independence, it becomes so much easier to use in new projects, and chances are
that it won&apos;t need to be updated nearly as often since it won&apos;t need to change as a result of one its dependent external
libraries changing which might be trying to fulfill a much more generalized purpose than what the audio library needs.&lt;/p&gt;
&lt;p&gt;So sometimes it&apos;s worth deliberately choosing to duplicate a little bit (consciously, never out of laziness -- actually
out of diligence) in order to decouple a library and make it independent because, through that independence, it achieves
a wider range of practical applicability and even stability (no more afferent couplings). If you want to design the most
reusable libraries possible that will last you from one project to the next and over the years, then on top of narrowing
its scope to the minimum, I would actually suggest considering duplicating a little bit here. And naturally write unit
tests and make sure it&apos;s really thoroughly tested and reliable at what it&apos;s doing. This is only for the libraries that
you really want to take the time to generalize to a point that goes far beyond a single project.&quot;&lt;/p&gt;
</content:encoded></item><item><title>Markdown Extended Features</title><link>https://leadership.qubitpi.org/posts/markdown-extended/</link><guid isPermaLink="true">https://leadership.qubitpi.org/posts/markdown-extended/</guid><description>Read more about Markdown features in Fuwari</description><pubDate>Wed, 01 May 2024 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;GitHub repository cards&lt;/h2&gt;
&lt;p&gt;You can add dynamic cards that link to GitHub repositories, on page load, the repository information is pulled from the GitHub API.&lt;/p&gt;
&lt;p&gt;::github{repo=&quot;Fabrizz/MMM-OnSpotify&quot;}&lt;/p&gt;
&lt;p&gt;Create a GitHub repository card with the code &lt;code&gt;::github{repo=&quot;&amp;lt;owner&amp;gt;/&amp;lt;repo&amp;gt;&quot;}&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;::github{repo=&quot;saicaca/fuwari&quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Admonitions&lt;/h2&gt;
&lt;p&gt;Following types of admonitions are supported: &lt;code&gt;note&lt;/code&gt; &lt;code&gt;tip&lt;/code&gt; &lt;code&gt;important&lt;/code&gt; &lt;code&gt;warning&lt;/code&gt; &lt;code&gt;caution&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;:::note
Highlights information that users should take into account, even when skimming.
:::&lt;/p&gt;
&lt;p&gt;:::tip
Optional information to help a user be more successful.
:::&lt;/p&gt;
&lt;p&gt;:::important
Crucial information necessary for users to succeed.
:::&lt;/p&gt;
&lt;p&gt;:::warning
Critical content demanding immediate user attention due to potential risks.
:::&lt;/p&gt;
&lt;p&gt;:::caution
Negative potential consequences of an action.
:::&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:::note
Highlights information that users should take into account, even when skimming.
:::

:::tip
Optional information to help a user be more successful.
:::
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The title of the admonition can be customized.&lt;/p&gt;
&lt;p&gt;:::note[MY CUSTOM TITLE]
This is a note with a custom title.
:::&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:::note[MY CUSTOM TITLE]
This is a note with a custom title.
:::
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;[!TIP]
&lt;a href=&quot;https://github.com/orgs/community/discussions/16925&quot;&gt;The GitHub syntax&lt;/a&gt; is also supported.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; [!NOTE]
&amp;gt; The GitHub syntax is also supported.

&amp;gt; [!TIP]
&amp;gt; The GitHub syntax is also supported.
&lt;/code&gt;&lt;/pre&gt;
</content:encoded></item><item><title>Markdown Example</title><link>https://leadership.qubitpi.org/posts/markdown/</link><guid isPermaLink="true">https://leadership.qubitpi.org/posts/markdown/</guid><description>A simple example of a Markdown blog post.</description><pubDate>Sun, 01 Oct 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;An h1 header&lt;/h1&gt;
&lt;p&gt;Paragraphs are separated by a blank line.&lt;/p&gt;
&lt;p&gt;2nd paragraph. &lt;em&gt;Italic&lt;/em&gt;, &lt;strong&gt;bold&lt;/strong&gt;, and &lt;code&gt;monospace&lt;/code&gt;. Itemized lists
look like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;this one&lt;/li&gt;
&lt;li&gt;that one&lt;/li&gt;
&lt;li&gt;the other one&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that --- not considering the asterisk --- the actual text
content starts at 4-columns in.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Block quotes are
written like so.&lt;/p&gt;
&lt;p&gt;They can span multiple paragraphs,
if you like.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Use 3 dashes for an em-dash. Use 2 dashes for ranges (ex., &quot;it&apos;s all
in chapters 12--14&quot;). Three dots ... will be converted to an ellipsis.
Unicode is supported. ☺&lt;/p&gt;
&lt;h2&gt;An h2 header&lt;/h2&gt;
&lt;p&gt;Here&apos;s a numbered list:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;first item&lt;/li&gt;
&lt;li&gt;second item&lt;/li&gt;
&lt;li&gt;third item&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note again how the actual text starts at 4 columns in (4 characters
from the left side). Here&apos;s a code sample:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Let me re-iterate ...
for i in 1 .. 10 { do-something(i) }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you probably guessed, indented 4 spaces. By the way, instead of
indenting the block, you can use delimited blocks, if you like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;define foobar() {
    print &quot;Welcome to flavor country!&quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(which makes copying &amp;amp; pasting easier). You can optionally mark the
delimited block for Pandoc to syntax highlight it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import time
# Quick, count to ten!
for i in range(10):
    # (but not *too* quick)
    time.sleep(0.5)
    print i
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;An h3 header&lt;/h3&gt;
&lt;p&gt;Now a nested list:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First, get these ingredients:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;carrots&lt;/li&gt;
&lt;li&gt;celery&lt;/li&gt;
&lt;li&gt;lentils&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Boil some water.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dump everything in the pot and follow
this algorithm:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; find wooden spoon
 uncover pot
 stir
 cover pot
 balance wooden spoon precariously on pot handle
 wait 10 minutes
 goto first step (or shut off burner when done)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Do not bump wooden spoon or it will fall.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Notice again how text always lines up on 4-space indents (including
that last line which continues item 3 above).&lt;/p&gt;
&lt;p&gt;Here&apos;s a link to &lt;a href=&quot;http://foo.bar&quot;&gt;a website&lt;/a&gt;, to a &lt;a href=&quot;local-doc.html&quot;&gt;local
doc&lt;/a&gt;, and to a &lt;a href=&quot;#an-h2-header&quot;&gt;section heading in the current
doc&lt;/a&gt;. Here&apos;s a footnote [^1].&lt;/p&gt;
&lt;p&gt;[^1]: Footnote text goes here.&lt;/p&gt;
&lt;p&gt;Tables can look like this:&lt;/p&gt;
&lt;p&gt;size material color&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;9 leather brown
10 hemp canvas natural
11 glass transparent&lt;/p&gt;
&lt;p&gt;Table: Shoes, their sizes, and what they&apos;re made of&lt;/p&gt;
&lt;p&gt;(The above is the caption for the table.) Pandoc also supports
multi-line tables:&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;keyword text&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;red Sunsets, apples, and
other red or reddish
things.&lt;/p&gt;
&lt;p&gt;green Leaves, grass, frogs
and other things it&apos;s
not easy being.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;A horizontal rule follows.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Here&apos;s a definition list:&lt;/p&gt;
&lt;p&gt;apples
: Good for making applesauce.
oranges
: Citrus!
tomatoes
: There&apos;s no &quot;e&quot; in tomatoe.&lt;/p&gt;
&lt;p&gt;Again, text is indented 4 spaces. (Put a blank line between each
term/definition pair to spread things out more.)&lt;/p&gt;
&lt;p&gt;Here&apos;s a &quot;line block&quot;:&lt;/p&gt;
&lt;p&gt;| Line one
| Line too
| Line tree&lt;/p&gt;
&lt;p&gt;and images can be specified like so:&lt;/p&gt;
&lt;p&gt;Inline math equations go in like so: $\omega = d\phi / dt$. Display
math should get its own line and be put in in double-dollarsigns:&lt;/p&gt;
&lt;p&gt;$$I = \int \rho R^{2} dV$$&lt;/p&gt;
&lt;p&gt;And note that you can backslash-escape any punctuation characters
which you wish to be displayed literally, ex.: `foo`, *bar*, etc.&lt;/p&gt;
</content:encoded></item><item><title>Reading Notes of &quot;De Administrando Imperio&quot;</title><link>https://leadership.qubitpi.org/posts/reading-notes-de-administrando-imperio/</link><guid isPermaLink="true">https://leadership.qubitpi.org/posts/reading-notes-de-administrando-imperio/</guid><description>A peek into how an emperor manages his nation</description><pubDate>Sun, 21 Jul 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Constantine VII Porphyrogenitus (905 - 959) was the fourth Byzantine emperor of the Macedonian dynasty,&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./macedonian-dynasty.png&quot; alt=&quot;Error loading macedonian-dynasty.png&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Byzantine_Empire_under_the_Macedonian_dynasty&quot;&gt;Byzantine Empire under the Macedonian dynasty&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;On Relations with Pechenegs&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;./pechenegs.png&quot; alt=&quot;Error loading pechenegs.png&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Pechenegs&quot;&gt;The Pechenegs and contemporary Asian polities circa 1000 CE.&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Keeping Peace with the Nation of the Pechenegs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Send every year to them from our side a diplomatic agent with presents&lt;/li&gt;
&lt;li&gt;Take from their side hostages and a diplomatic agent&lt;/li&gt;
&lt;li&gt;A broken friendship with them may cause them invading &lt;a href=&quot;https://en.wikipedia.org/wiki/Cherson_(theme)&quot;&gt;Cherson&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Dealing with Pechenegs and Russians Together&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When the two are not at peace with each other, &lt;strong&gt;raid Russia hard&lt;/strong&gt; &amp;lt;img /&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Russia have to maintain a relationship with Pechenegs because&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It imports indispensable goods from Pechenegs&lt;/li&gt;
&lt;li&gt;Russian cannot safely conduct distant and massive invasion unless Pachenegs are happy with not sneak attacking their
homes at the back&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We don&apos;t have to worry about the Russians in terms of both war and trade if P &amp;amp; R are not happy with each other anyway&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;:::important
Managing relationships among parties is about prioritizing the power &amp;amp; strength among them
:::&lt;/p&gt;
</content:encoded></item><item><title>Include Video in the Posts</title><link>https://leadership.qubitpi.org/posts/video/</link><guid isPermaLink="true">https://leadership.qubitpi.org/posts/video/</guid><description>This post demonstrates how to include embedded video in a blog post.</description><pubDate>Tue, 01 Aug 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Just copy the embed code from YouTube or other platforms, and paste it in the markdown file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: Include Video in the Post
published: 2023-10-19
// ...
---

&amp;lt;iframe width=&quot;100%&quot; height=&quot;468&quot; src=&quot;https://www.youtube.com/embed/5gIf0_xpFPI?si=N1WTorLKL0uwLsU_&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;YouTube&lt;/h2&gt;
&lt;p&gt;&amp;lt;iframe width=&quot;100%&quot; height=&quot;468&quot; src=&quot;https://www.youtube.com/embed/5gIf0_xpFPI?si=N1WTorLKL0uwLsU_&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
&lt;h2&gt;Bilibili&lt;/h2&gt;
&lt;p&gt;&amp;lt;iframe width=&quot;100%&quot; height=&quot;468&quot; src=&quot;//player.bilibili.com/player.html?bvid=BV1fK4y1s7Qf&amp;amp;p=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;&amp;gt; &amp;lt;/iframe&amp;gt;&lt;/p&gt;
</content:encoded></item></channel></rss>